/* 
 * File: sjf.c
 * Author: Stephen Sampson
 * Purpose: This file contains the shortest job first module to serve HTTP 
 * 			requests.
 *
 * 			Please see sjf.h for documentation on how to use this module.
 */


#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/sendfile.h>
#include <sys/stat.h>
#include <string.h>
#include <unistd.h>
#include "network.h"
#include "universal_functions.h"

void sjf(int port_number, int debug) {
	
	
	printf("YOU ARE IN THE SJF SCHEDULER\n");
	char **request_elements = calloc(3, sizeof(char**));    /* array of strings */
	char *to_parse = calloc(256, sizeof(char));			 /* string to be parsed */
	char *location;						/*string for location of requested file */
	int client_socket = 0;
	FILE *requested_file;				  /* the actual file to be sent to client */
	
	/* BEGIN MAIN PROGRAM EXECUTION  */
	network_init(port_number); 	  	  /* initialize network on specified port */
	while(1) {
		network_wait();   				 	  	  	  /*  wait for client to connect */
		if (debug==1)
			printf("\nClient Connected\n");
		client_socket = network_open(); 		 	 /* open a socket conn to client */
		if (client_socket > 0) {
			read(client_socket, to_parse, 256 ); 			 /* read client request */
			/* break HTTP request into its constituent elements */
			parse(request_elements, to_parse);	
			if((request_elements[0] == NULL) | (request_elements[1] == NULL)
			| (request_elements[2] == NULL)){
				if(debug==1)
					printf("Invalid Request: One of the request elements is NULL\n");
					msg400(client_socket);
			} else {
				if((strcmp(request_elements[0], "GET") == 0)                                                                                                            
				&& (strcmp(request_elements[2], "HTTP/1.1") == 0)) {
				   location = request_elements[1];
					/* lines 88-102 (debug only) verify request parsed correctly */
					if (debug==1){
						printf("HTTP Request Parsed Successfully\n");	
						printf("Client Sent a Get Request\n");
						if(request_elements[1] != NULL) {
							printf("The Desired File Should Be Located at: ");
							printf(location);
						}
						if(request_elements[2] != NULL) {
							printf("\nThe Client is Requesting to use ");
							printf("%s", request_elements[2]);
							printf("\n");
						}
					}
					/* verify file was opened successfully before acting on it */
					if (fopen(location, "r") != NULL){	
						msg200(client_socket); 					 /* status OK */
						requested_file = fopen(location, "r");
						int fd = -1; 		  /* file descriptor for file to be sent  */
						fd = fileno(requested_file);
						fflush(stdout); 							/* flush output buffer  */
						if(debug==1)
							printf("The Stream has FD Number: %d\n", fd);
						struct stat buf;
						fstat(fd, &buf);	/* retrieve file stats for requested file */
						int filesize = buf.st_size;		/* size of requested file  */
						if(debug==1)
							printf("The File Size is: %d\n", filesize);
						if(filesize <= 2147479552) /* allowable sendfile() file size */
							/* send the file to the client */	
							sendfile(client_socket, fd, NULL, filesize);
						else
							filsizerr(client_socket);
						fflush(stdout);						 	 /* flush output buffer */
						fclose(requested_file);			  /* close the requested file */
						close(fd);
					} else {
						msg404(client_socket);
					}
				} else {
					msg400(client_socket);
				}
			} 
		write(client_socket, "\n", 2);
		/* Close Socket Connection  */
		close(client_socket);
		/* clear http request element strings if they hold data */
		int i=0;
		for(i=0; i<3; i++)
			if(request_elements[i] != NULL)
				memset(request_elements[i], '\0', strlen(request_elements[i]));
		}
	}
	free(request_elements);
	free(to_parse);
}
